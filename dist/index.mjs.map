{"version":3,"file":"index.mjs","sources":["../src/useOnline.ts","../src/useIntersectionObserver.ts","../src/useAcceptOnlyInteger.ts","../src/useLanguage.ts","../src/useNetworkConnection.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport interface useOnline {\r\n  isOnline: boolean;\r\n}\r\n\r\n/**\r\n * Return a boolean value based on the internet connection.\r\n *\r\n * @default `true`\r\n *\r\n * @return `boolean`\r\n */\r\nexport function useOnline(): useOnline {\r\n  const [isOnline, setIsOnline] = useState<boolean>(true);\r\n\r\n  function online() {\r\n    setIsOnline(true);\r\n  }\r\n\r\n  function offline() {\r\n    setIsOnline(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"online\", online);\r\n    window.addEventListener(\"offline\", offline);\r\n\r\n    return () => (\r\n      window.removeEventListener(\"online\", online),\r\n      window.removeEventListener(\"offline\", offline)\r\n    );\r\n  }, [isOnline]);\r\n\r\n  return {\r\n    isOnline,\r\n  };\r\n}\r\n","import { useEffect } from \"react\";\r\n\r\nexport interface intersectionObserverOptions {\r\n  threshold?: number\r\n  rootMargin?: string | undefined\r\n  root?: Element | Document | null | undefined\r\n\r\n  /**\r\n   * a target where you want it to observe\r\n   */\r\n  target: string\r\n\r\n  /**\r\n   * a class where you add to style base on your preferences\r\n   */\r\n  className: string\r\n}\r\n\r\n/**\r\n * Trigger an element when reaching the target.\r\n * @params `threshold` , `rootMargin`, `root`, `target`, `className`\r\n * @types number, string | px | em | rem | etc, Element | Document | null | undefined, string, string\r\n * @return void\r\n */\r\nexport function useIntersectionObserver(options: intersectionObserverOptions) {\r\n  const {\r\n    threshold = 0,\r\n    rootMargin = '0px',\r\n    root = undefined,\r\n    className,\r\n    target\r\n  } = options\r\n\r\n  const intersect = () => {\r\n    if(typeof IntersectionObserver !== undefined) {\r\n      const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach((entry) => {\r\n          entry.target.classList.toggle(className)\r\n\r\n          if(entry.isIntersecting) observer.unobserve(entry.target)\r\n        })\r\n      }, {\r\n        threshold: threshold,\r\n        root: root,\r\n        rootMargin: rootMargin\r\n      })\r\n\r\n      document.querySelectorAll(target).forEach((t: Element) => {\r\n        observer.observe(t)\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    intersect()\r\n  }, [intersect])\r\n}","import { useReducer } from 'react'\r\n\r\n/**\r\n * A hook use to accept only interger of an input field\r\n * * use Ctrl + Backspace to clear all value in input field\r\n * @closure setValue\r\n * @closure handleKey\r\n * @return value , setValue, handleKey\r\n * @example\r\n * ```ts\r\n * const { value, setValue, handleKey } = useAcceptOnlyInteger\r\n * return (\r\n *   <input\r\n *     type=\"text\"\r\n *     value={value}\r\n *     onChange={(e) => setValue(e.target.value)}\r\n *     onKeyDown={handleKey}\r\n *   />\r\n * )\r\n * ```\r\n */\r\nexport function useAcceptOnlyInteger() {\r\n\tconst keysCanBeAccept = [\r\n\t\t'0',\r\n\t\t'1',\r\n\t\t'2',\r\n\t\t'3',\r\n\t\t'4',\r\n\t\t'5',\r\n\t\t'6',\r\n\t\t'7',\r\n\t\t'8',\r\n\t\t'9',\r\n\t\t'0',\r\n\t]\r\n\r\n\tconst allowKey = [\r\n\t\t'Backspace',\r\n\t\t'Delete',\r\n\t\t'ArrowUp',\r\n\t\t'ArrowDown',\r\n\t\t'ArrowLeft',\r\n\t\t'ArrowRight',\r\n\t\t'ShiftLeft',\r\n\t\t'AltLeft',\r\n\t\t'F5',\r\n\t]\r\n\r\n\tconst [value, dispatch] = useReducer((state: string, action: string) => {\r\n\t\treturn (state = action)\r\n\t}, '')\r\n\r\n\t/**\r\n\t * Set a value\r\n\t * @param value accept the value when pass the key\r\n\t */\r\n\tconst setValue = (value: string) => {\r\n\t\tdispatch(value)\r\n\t}\r\n\r\n\t/**\r\n\t * Allow user to input only integer\r\n\t * @param event accept keyboard event\r\n\t */\r\n\tconst handleKey = (event: any): boolean => {\r\n\t\tconst ev = event as KeyboardEvent\r\n\r\n\t\tif (keysCanBeAccept.includes(ev.key) || allowKey.includes(ev.code)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tev.preventDefault()\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn {\r\n\t\tvalue,\r\n\t\tsetValue,\r\n\t\thandleKey,\r\n\t}\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Return a current language\r\n * @return language\r\n */\r\nexport function useLanguage() {\r\n\tconst [lang, setLang] = useState<string>(navigator.language)\r\n\r\n\tconst init = () => {\r\n\t\tconst language = navigator.languages\r\n\r\n\t\tsetLang(language[1])\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tinit()\r\n\t}, [lang])\r\n\r\n\treturn {\r\n\t\tlang,\r\n\t}\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\ntype options = {\r\n\t/**\r\n\t * Current type of network\r\n\t */\r\n\teffectiveType: '4g' | '3g' | '2g' | 'slow-2g'\r\n\r\n\t/**\r\n\t * Return downlink speeds\r\n\t */\r\n\tdownlink: number\r\n\r\n\t/**\r\n\t * effective round-trip time of the current connection\r\n\t */\r\n\trtt: number\r\n\r\n\tsaveData: boolean\r\n}\r\n\r\n/**\r\n * Return a current status of network.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\r\n */\r\nexport function useNetworkConnection(options?: options) {\r\n\tconst [network, setNetwork] = useState<typeof options>({} as options)\r\n\r\n\tconst init = () => {\r\n\t\tconst navigator = window?.navigator\r\n\r\n\t\tif (navigator && 'connection' in navigator) {\r\n\t\t\tconst nav = (navigator as any).connection as options\r\n\t\t\tsetNetwork({\r\n\t\t\t\tdownlink: nav.downlink,\r\n\t\t\t\teffectiveType: nav.effectiveType,\r\n\t\t\t\trtt: nav.rtt,\r\n\t\t\t\tsaveData: nav.saveData,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tinit()\r\n\t}, [network?.downlink, network?.effectiveType, network?.rtt])\r\n\r\n\treturn {\r\n\t\tnetwork,\r\n\t}\r\n}\r\n"],"names":["useOnline","isOnline","setIsOnline","useState","online","offline","useEffect","window","addEventListener","removeEventListener","useIntersectionObserver","options","threshold","rootMargin","root","className","target","intersect","IntersectionObserver","observer","entries","forEach","entry","classList","toggle","isIntersecting","unobserve","document","querySelectorAll","t","observe","useAcceptOnlyInteger","keysCanBeAccept","allowKey","value","dispatch","useReducer","state","action","setValue","handleKey","event","ev","includes","key","code","preventDefault","useLanguage","lang","setLang","navigator","language","languages","init","useNetworkConnection","network","setNetwork","nav","connection","downlink","effectiveType","rtt","saveData"],"mappings":"gEAaO,SAASA,IACd,MAAOC,EAAUC,GAAeC,GAAkB,GAElD,SAASC,IACPF,GAAY,EACd,CAEA,SAASG,IACPH,GAAY,EACd,CAYO,OAVPI,GAAU,KACDC,OAAAC,iBAAiB,SAAUJ,GAC3BG,OAAAC,iBAAiB,UAAWH,GAE5B,KACLE,OAAOE,oBAAoB,SAAUL,GACrCG,OAAOE,oBAAoB,UAAWJ,MAEvC,CAACJ,IAEG,CACLA,WAEJ,CCbO,SAASS,EAAwBC,GAChC,MAAAC,UACJA,EAAY,EAAAC,WACZA,EAAa,MAAAC,KACbA,EAAOC,UACPA,EAAAC,OACAA,GACEL,EAEEM,EAAY,KACb,QAAgC,WAAzBC,qBAAoC,CAC5C,MAAMC,EAAW,IAAID,sBAAsBE,IACjCA,EAAAC,SAASC,IACTA,EAAAN,OAAOO,UAAUC,OAAOT,GAE3BO,EAAMG,gBAAyBN,EAAAO,UAAUJ,EAAMN,OAAM,GACzD,GACA,CACDJ,YACAE,OACAD,eAGFc,SAASC,iBAAiBZ,GAAQK,SAASQ,IACzCV,EAASW,QAAQD,EAAC,GAEtB,GAGFvB,GAAU,KACEW,GAAA,GACT,CAACA,GACN,CCnCO,SAASc,IACf,MAAMC,EAAkB,CACvB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGKC,EAAW,CAChB,YACA,SACA,UACA,YACA,YACA,aACA,YACA,UACA,OAGMC,EAAOC,GAAYC,GAAW,CAACC,EAAeC,IACpCA,GACd,IAyBI,MAAA,CACNJ,QACAK,SArBiBL,IACjBC,EAASD,EAAK,EAqBdM,UAdkBC,IAClB,MAAMC,EAAKD,EAEP,SAAAT,EAAgBW,SAASD,EAAGE,OAAQX,EAASU,SAASD,EAAGG,SAI7DH,EAAGI,kBACI,EAAA,EAQT,CC1EO,SAASC,IACf,MAAOC,EAAMC,GAAW9C,EAAiB+C,UAAUC,UAY5C,OAJP7C,GAAU,KANG,MACZ,MAAM6C,EAAWD,UAAUE,UAE3BH,EAAQE,EAAS,GAAE,EAIdE,EAAA,GACH,CAACL,IAEG,CACNA,OAEF,CCGO,SAASM,EAAqB3C,GACpC,MAAO4C,EAASC,GAAcrD,EAAyB,CAAa,GAoB7D,OAJPG,GAAU,KAdG,MACZ,MAAM4C,EAAY3C,QAAQ2C,UAEtB,GAAAA,GAAa,eAAgBA,EAAW,CAC3C,MAAMO,EAAOP,EAAkBQ,WACpBF,EAAA,CACVG,SAAUF,EAAIE,SACdC,cAAeH,EAAIG,cACnBC,IAAKJ,EAAII,IACTC,SAAUL,EAAIK,UAEhB,GAIKT,EAAA,GACH,CAACE,GAASI,SAAUJ,GAASK,cAAeL,GAASM,MAEjD,CACNN,UAEF"}